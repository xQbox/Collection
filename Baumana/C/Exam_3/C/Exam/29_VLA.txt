Вопрос 29 (Variable Length Array)

Теория:
	- начиная С99 
		1) Были добавлены VLA - массив переменной длины
		(Длина такого массива вычисляется 
		во время выполнения программы, а не во время 
		компиляции.)
			- ПАМЯТЬ выделяется  на СТЕКЕ. 
			- Массивы переменной длины (VLA) могут быть 
			матрицами.
			- Адресная арифметика справедлива для VLA.
			- Нельзя проинициализировать при определении.
			- Облегчают описание заголовков функций
	- alloca
		- функция alloca выделяет область памяти на СТЕКЕ.
		(область памяти автоматически освобождается, когда 
		функция, которая вызвала alloca, возвращает управления,
		(когда выходим из функции).)
		(alloca не проверяет успешность выделения памяти) 
		
		- Сравнение:
			+ Выделение памяти происходит быстро
			+ Выделеннная память освобождается автоматически
			
			- Функция нестандартная (нет ни в С99 , ни в 
						POSIX, только в GNU)
			- Серьезные ограничения по размеру области 
			(из-за выделения памяти на стеке)
			- Только при выходе из функции очищается память
			{
				void foo(size_t size)
				{
				
					while(b)
					{
						char *tmp = 
							alloca(size); 
					}
				}
			}
			
			
		
		
		
Дополнительно:
	
Практика: 
	Типичная ошибка использования alloca:
		- Память выделяется постоянно, как только управление 
		переходит к функции foo
		void foo(size_t size)
		{
			while(b)
			{
					char *tmp = 
						alloca(size); 
			}
		}
		
		- Память выделяется только в теле цикла
		void foo(size_t size)
		{
			while(b)
			{
					char tmp[size]; 
			}
		}
			
	
